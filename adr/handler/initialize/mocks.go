// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package initialize is a generated GoMock package.
package initialize

import (
	os "os"
	reflect "reflect"

	state "github.com/docula-io/docula/state"
	gomock "github.com/golang/mock/gomock"
)

// mockStateManager is a mock of StateManager interface.
type mockStateManager struct {
	ctrl     *gomock.Controller
	recorder *mockStateManagerMockRecorder
}

// mockStateManagerMockRecorder is the mock recorder for mockStateManager.
type mockStateManagerMockRecorder struct {
	mock *mockStateManager
}

// NewmockStateManager creates a new mock instance.
func NewmockStateManager(ctrl *gomock.Controller) *mockStateManager {
	mock := &mockStateManager{ctrl: ctrl}
	mock.recorder = &mockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *mockStateManager) EXPECT() *mockStateManagerMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *mockStateManager) Load() (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *mockStateManagerMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*mockStateManager)(nil).Load))
}

// NormalizePath mocks base method.
func (m *mockStateManager) NormalizePath(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NormalizePath", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NormalizePath indicates an expected call of NormalizePath.
func (mr *mockStateManagerMockRecorder) NormalizePath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NormalizePath", reflect.TypeOf((*mockStateManager)(nil).NormalizePath), path)
}

// Save mocks base method.
func (m *mockStateManager) Save(arg0 state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *mockStateManagerMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*mockStateManager)(nil).Save), arg0)
}

// StateDir mocks base method.
func (m *mockStateManager) StateDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateDir indicates an expected call of StateDir.
func (mr *mockStateManagerMockRecorder) StateDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateDir", reflect.TypeOf((*mockStateManager)(nil).StateDir))
}

// mockFileSystem is a mock of FileSystem interface.
type mockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *mockFileSystemMockRecorder
}

// mockFileSystemMockRecorder is the mock recorder for mockFileSystem.
type mockFileSystemMockRecorder struct {
	mock *mockFileSystem
}

// NewmockFileSystem creates a new mock instance.
func NewmockFileSystem(ctrl *gomock.Controller) *mockFileSystem {
	mock := &mockFileSystem{ctrl: ctrl}
	mock.recorder = &mockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *mockFileSystem) EXPECT() *mockFileSystemMockRecorder {
	return m.recorder
}

// Mkdir mocks base method.
func (m *mockFileSystem) Mkdir(name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *mockFileSystemMockRecorder) Mkdir(name, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*mockFileSystem)(nil).Mkdir), name, perm)
}
